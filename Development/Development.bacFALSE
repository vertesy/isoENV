# ____________________________________________________________________
# isoENV helps you to work with isolated environments.  ----
# ____________________________________________________________________
# devtools::load_all("~/GitHub/Packages/isoENV"); devtools::document("~/GitHub/Packages/isoENV")
# try(source("~/GitHub/Packages/isoENV/R/isoENV.R"), silent = TRUE)
# try(source("https://raw.githubusercontent.com/vertesy/isoENV/main/isoENV.R"), silent = TRUE)


# ______________________________________________________________________________________________----
# Section 1  ----
# ____________________________________________________________________


# ________________________________________________________________________________________________
#' Source a script with strict environment control
#'
#' This function sources a script file into a new environment. It can selectively import variables
#' and functions from the global environment and return specified variables back to the global environment.
#'
#' @param path The file path of the R script to be sourced.
#' @param input.variables A character vector of global variable names to be passed on.
#' @param output.variables A character vector of variable names from the sourced environment to be returned to the global environment.
#' @param passAllFunctions Logical; if TRUE, all global functions are passed on, otherwise only those in input.functions.
#' @param input.functions A character vector of global function names to be passed on if passAllFunctions is FALSE.
#' @param returnEnv Logical; if TRUE, assigns the new environment to the global environment.
#' @param ... Arguments to pass on to source()
#' @return No return value, the function returns variables into the .GlobalEnv.
#' @export
#' @examples
#' \dontrun{
#'   sourceClean(path = "path/to/your/script.R",
#'                input.variables = c("x"),
#'                output.variables = c("res"),
#'                passAllFunctions = TRUE,
#'                input.functions = NULL,
#'                returnEnv = TRUE)
#' }
sourceClean <- function(path, input.variables, output.variables
                        , passAllFunctions = TRUE, input.functions = NULL
                        , returnEnv = TRUE
                        , ...) {

  # Argument assertions
  stopifnot(
    is.character(path),
    is.character(input.variables),
    is.character(output.variables),
    "Either passAllFunctions OR give a character of fun names" =
      passAllFunctions || is.character(input.functions)
  )
  script_name <- basename(path)

  # ________________________________________________________________________________________________
  # Input Variables ----

  objects.existing <- checkVars(input.variables, envir =  globalenv(), prefix = "Problematic INPUT!\n")
  obj.is.function <- sapply(objects.existing, function(x) is.function(get(x, envir = .GlobalEnv)))
  if(any(obj.is.function )) {
    xm <- cat("FUNCTIONS passed to input.variables:", objects.existing[obj.is.function]
              , '\nSkipped.\n')
  }

  # Create new environment that does not see .GlobalEnv (not its parent)/
  myEnv <- new.env(parent = baseenv())

  # Copy specified global variables to myEnv
  vars <- mget(input.variables, .GlobalEnv, ifnotfound = NA)
  vars <- Filter(Negate(is.na), vars)
  list2env(vars, envir = myEnv)

  # ________________________________________________________________________________________________
  # Input Functions ----

  # Depending on the flag, either pass all functions or only specified ones
  if (isFALSE(passAllFunctions)) {
    if (length(input.functions) == 0) {
      stop("input.functions must be provided if passAllFunctions is FALSE")
    } else {
      if(checkmate::anyMissing(input.functions)) warning("Missing function!\n", immediate. = T)
      objects.existing <- checkVars(input.functions, envir =  globalenv(), prefix = "Missing FUNCTIONS!\n")
      obj.is.function <- sapply(objects.existing, function(x) is.function(get(x, envir = .GlobalEnv)))

      if(any(!obj.is.function )) {
        xm <- cat("Non-FUNCTIONS passed to input.functions:", objects.existing[!obj.is.function]
                  , '\nSkipped.\n')
      }
      input.functions <- objects.existing[obj.is.function]
    }
  }

  functions2pass <-
    if (passAllFunctions) {
      lsf.str(envir = .GlobalEnv)
    } else {
      input.functions
    }

  # Copy functions from the global environment to myEnv
  functionsToPass <- mget(functions2pass, .GlobalEnv, ifnotfound = NA)
  # functionsToPass <- Filter(Negate(is.na), functionsToPass)
  list2env(functionsToPass, envir = myEnv)

  # ________________________________________________________________________________________________
  # Source the script in myEnv
  source(file = path, local = myEnv, ...)


  # ________________________________________________________________________________________________
  # Output Variables ----
  output.variables.existing <- checkVars(output.variables, envir =  myEnv, prefix = "Problematic OUTPUT!\n")

  # ________________________________________________________________________________________________
  # Output Functions ----
  "Output Functions are not checked atm."

  # Copy specified myEnv variables back to .GlobalEnv
  varsOut <- mget(output.variables.existing, envir = myEnv, ifnotfound = NA)
  varsOut <- Filter(Negate(is.na), varsOut)
  cat(">> Returning:", output.variables.existing, 'from', script_name, '\n')
  list2env(varsOut, envir = .GlobalEnv)

  if (returnEnv) {
    env.name <- paste0(".env.", script_name)
    assign(x = env.name, value = myEnv, envir = .GlobalEnv)
    cat(">> Script local environment is returned as:", env.name, '\n')
  }
  # return(myEnv)
}



# ______________________________________________________________________________________________----
# 2. Debugging  ----
# ____________________________________________________________________

# See: source("~/GitHub/Packages/isoENV/R/isoENV.other.RR")


# ______________________________________________________________________________________________----
# 3. Helpers  ----
# ____________________________________________________________________

#' Check Variables in an Environment
#'
#' This function iterates over a list of variable names and checks their
#' existence and value in a given environment. It issues warnings for variables
#' that are missing, NULL, NA, NaN, infinite, or empty, and sends a message for
#' variables that are defined and not empty.
#'
#' @param variables A character vector of variable names to check.
#' @param envir The environment in which to look for the variables.
#' @param verbose Report on good (passing) variables.
#' @param suffix Suffix to append to printed summary statement.
#' @return No return value, called for side effects.
#' @examples
#' myEnv <- new.env()
#' myEnv$aaa <- 111
#' myEnv$xxx <- NULL
#' myEnv$yyy <- list()
#' myEnv$zzz <- numeric()
#' output.variables <- c('aaa','xxx', 'zzz', 'yyy', 'bbb')
#' checkVars(output.variables, envir = myEnv)
#' @export
checkVars <- function(variables, envir, verbose = F
                      , prefix = 'Problematic variables!\n', suffix = NULL) {

  stopifnot(is.character(variables), is.environment(envir))

  # filter out functions that should be returned!
  # variables <- isoENV:::.filterFunctionsFromObjNames(variables, envir = envir)

  cat("\n--------------------------------------------------------------------------------\n"
      , length(variables), "variables are checked for content in", substitute(variables), variables, suffix, "\n")

  wasProblem <- FALSE
  for (var in variables) {
    # cat("Checking variable:", var, "\n")
    if (!exists(var, envir = envir)) {
      warning(var, " is missing", immediate. = T); wasProblem <- TRUE
    } else {
      value <- get(var, envir = envir)
      if (is.function(value)) {
        # cat(var, "is a function, skipping...\n")
        next
      } else if (is.null(value)) {
        warning(var, " is NULL", immediate. = T); wasProblem <- TRUE
      } else if (identical(value, NA)) {
        warning(var, " is NA", immediate. = T); wasProblem <- TRUE
      } else if (length(value) == 0) {
        warning(var, " is empty", immediate. = T); wasProblem <- TRUE
      } else if (is.numeric(value) && any(is.nan(value))) {
        warning(var, " contains NaN values", immediate. = T); wasProblem <- TRUE
      } else if (is.numeric(value) && any(is.infinite(value))) {
        warning(var, " contains Inf values", immediate. = T); wasProblem <- TRUE
      } else if (verbose) {
        message(var, " is defined and not empty", immediate. = T); wasProblem <- TRUE
      }
    }
  } # for

  if(!is.null(prefix) && wasProblem ) cat(as.character(prefix), fill=T)

  variables.existing <- variables[sapply(variables, exists)]
  return(variables.existing)
}

# ______________________________________________________________________________________________----
# 3. Private Helper Functions  ----
# ____________________________________________________________________

#' Check Names for Variable or Function Type
#'
#' This function takes a character vector of object names and checks whether
#' they correspond to variables or functions within the provided environment.
#' It issues warnings for function names and for missing objects, and returns a list of variable names.
#'
#' @param names A character vector containing names to check.
#' @param envir The environment in which to check for names.
#' @return A character vector of variable names.
#' @export
#' @examples
#' myEnv <- new.env()
#' myEnv$x <- 4
#' myEnv$fff <- function(x) x^3
#' .filterFunctionsFromObjNames(c('x', 'fff'), envir = myEnv)

.filterFunctionsFromObjNames <- function(names, envir) {
  # Argument assertions
  stopifnot(is.character(names), is.environment(envir))

  idxFuns <- sapply(names, function(name) {
    # Check if the object exists in the environment
    if (!exists(name, envir = envir)) {
      warning(name, " does not exist in the environment.\n")
      return(FALSE)
    }
    is.function(get(name, envir = envir))
  })

  FunNames <- names(idxFuns)[idxFuns]
  VarNames <- names(idxFuns)[!idxFuns]

  if (length(FunNames) > 0) {
    warning(paste(paste(FunNames, "is a function.\n"), collapse = " "), immediate. = TRUE
            # , "Only variables are returned: ", paste(VarNames, collapse = ", ")
            )
  }

  return(VarNames)
}


